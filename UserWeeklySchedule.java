/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//package newpackage;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import java.awt.*;
import javax.swing.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.io.*;

import javax.swing.table.TableCellRenderer;
import java.util.*;

/**
 *
 * @author npadm
 */

public class UserWeeklySchedule extends javax.swing.JFrame {

    /**
     * Creates new form WeeklySchedule
     */
    public UserWeeklySchedule() {
        initComponents();
        setSize(1100, 600);
        setResizable(false);
        buildLogoPanel();
        add(logoPanel);
        add(groupPanel);
        
        FlowLayout layout = new FlowLayout();
        setLayout(layout);

        

        newPassword.setBounds(300, 240, 135, 30);
        //Encryption e = new Encryption(56);
        Container cont = getContentPane();
         cont.revalidate();
         cont.repaint();
         cont.setBackground(new Color(160, 0,0));
    }


public class CustomCellRenderer extends DefaultTableCellRenderer {
    private int startRow;
    private int endRow;
    private Color backgroundColor;

    public CustomCellRenderer(int startRow, int endRow, Color backgroundColor) {
        this.startRow = startRow;
        this.endRow = endRow;
        this.backgroundColor = backgroundColor;
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        if (row >= startRow && row <= endRow) {
            cellComponent.setBackground(backgroundColor);
        } else {
            cellComponent.setBackground(table.getBackground());
        }

        return cellComponent;
    }



    public void resetRendererProperties(Component cellComponent) {
        cellComponent.setBackground(null);
        cellComponent.setForeground(null);
        cellComponent.setFont(null);
    }

}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        minusBtn = new javax.swing.JButton();
        plusBtn = new javax.swing.JButton();
        removeUserBtn = new javax.swing.JButton();
        plusIcon = new ImageIcon(AdminWeeklySchedule.class.getResource("/img/plus.png"));
        minusIcon = new ImageIcon(AdminWeeklySchedule.class.getResource("/img/minus.png"));
        groupPanel = new JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Object[][] schedule = new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            };
            String[] days = new String [] {
                "", "MON", "TUES", "WED", "THUR", "FRI", "SAT", "SUN"
            };

        try
        {
            File scheduleWeek = new File("schedule.txt");
            Scanner schedReader = new Scanner(scheduleWeek);
            ArrayList<String> lines = new ArrayList<String>();
            while(schedReader.hasNextLine()){
                lines.add(schedReader.nextLine());
            }

            int counter = -1;
            for(int i = 0; i < 18; i++)
            {
                for(int j = 0; j<8; j++){
                    counter++;
                    if(lines.get(counter).equals("null")){
                        schedule[i][j]=null;
                    } else{
                        schedule[i][j]= lines.get(counter);
                    }
                }
            }
            schedReader.close();
        }catch (Exception ex) {
            System.out.println("An error was encountered.");
        }

        table.setModel(new javax.swing.table.DefaultTableModel(schedule, days));
        table.setShowHorizontalLines(true);
        table.setShowVerticalLines(true);
        table.setGridColor(new Color(212, 207, 207));
        table.setBackground(new Color(33, 33, 33));
        table.setForeground(new Color(255, 255, 255));
        table.setRowHeight(20);
        table.setFont(new Font("Verdana", Font.BOLD, 8));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);
        jScrollPane1.setBackground(new Color(60, 0, 0));
        

        //reset size of icons
        minusIcon = imgResize(200, 200, minusIcon);
        plusIcon = imgResize(200, 200, plusIcon);

        //button aesthetics
        minusBtn.setOpaque(false);
        minusBtn.setContentAreaFilled(false);
        minusBtn.setBorderPainted(false);
        plusBtn.setOpaque(false);
        plusBtn.setContentAreaFilled(false);
        plusBtn.setContentAreaFilled(false);

        //button cursor
        minusBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
        plusBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
    

        minusBtn.setIcon(minusIcon); // NOI18N
        minusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusBtnActionPerformed(evt);
            }
        });

        plusBtn.setIcon(plusIcon); // NOI18N
        plusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusBtnActionPerformed(evt);
            }
        });



        
        groupPanel.add(jScrollPane1); 
    
        pack();

        
    }// </editor-fold>//GEN-END:initComponents

    //design the panel for the logo
    private void buildLogoPanel() {

        newPassword = new JButton("Create Password");
        newPassword.setFont(new Font("Verdana", Font.PLAIN, 12));
        newPassword.setBackground(new Color(10, 0,0));
        newPassword.setBorderPainted(false);
        logoIconLabel = new JLabel();
        logoIcon = new ImageIcon(AdminWeeklySchedule.class.getResource("/img/logo2.png"));
        logoIcon = imgResize(80, 50, logoIcon);
        logoIconLabel.setIcon(logoIcon);
        logoTitle = new JLabel(" | Shift Scheduler |                                                                                          ");
        logoTitle.setFont(new Font("Verdana", Font.BOLD, 18));
        logoTitle.setForeground(new Color(255, 255, 255));
        logoPanel = new JPanel();

        newPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordActionPerformed(evt);
            }
        });

        logoPanel.add(logoIconLabel);
        logoPanel.add(logoTitle);

        logoPanel.setBackground(new Color(160,0,0));
    }

    public ImageIcon imgResize(int width, int height, ImageIcon icon) {

        Image image = icon.getImage();
        Image newimg = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);

        return icon;
    }
    public void saveSchedule() throws IOException
    {
        File scheduleWeek = new File("schedule.txt");
        PrintWriter scheduleWriter = new PrintWriter(scheduleWeek.getAbsoluteFile());
        BufferedWriter schedWriter2 = new BufferedWriter(scheduleWriter);

        for(int i = 0; i < table.getRowCount(); i++)
        {
            for(int j = 0; j < table.getColumnCount(); j++)
            {
                schedWriter2.write((String)table.getModel().getValueAt(i, j) + "\n");
            }
        }

        schedWriter2.close();
        scheduleWriter.close();
    }
public void removeUser(ArrayList<String> u, ArrayList<String> p) throws IOException{
        String removal = JOptionPane.showInputDialog("What is the email adress of the user that you want to remove?");
        FileWriter emailWriter = new FileWriter("emails.txt");
        FileWriter passwordWriter = new FileWriter("passwords.txt");

        for(int i = 0; i < u.size(); i++){
            if (u.get(i).equals(removal)){
                u.remove(i);
                p.remove(i);
                for (int j = 0; j < u.size(); j++) {
                    emailWriter.write(u.get(j) + "\n");
                }
                for (int k = 0; k < p.size(); k++) {
                    passwordWriter.write(p.get(k) + "\n");
                }
                emailWriter.close();
                passwordWriter.close();
            }
            else{
                JOptionPane.showMessageDialog(null,"Email not found! Quitting...");

            }
        }
    }

    public void addUser(String u, String p) throws IOException, NoSuchAlgorithmException, FileNotFoundException{
        try{
            FileWriter emailWriter = new FileWriter("emails.txt");
        FileWriter passwordWriter = new FileWriter("passwords.txt");

        PassEncrypt encrypter = new PassEncrypt();
        String encryptedPass = encrypter.encrypt(p);

        File emailsFile = new File("emails.txt");
        File passwordsFile = new File("passwords.txt");
        Scanner emailReader = new Scanner(emailsFile);
        Scanner passwordReader = new Scanner(passwordsFile);
        ArrayList<String> emails = new ArrayList<String>();
        ArrayList<String> passwords = new ArrayList<String>();

        while(emailReader.hasNextLine())
        {
            emails.add(emailReader.nextLine());
        }
        emailReader.close();

        while(passwordReader.hasNextLine())
        {
            passwords.add(passwordReader.nextLine());
        }
        passwordReader.close();

        emails.add(u);
        passwords.add(encryptedPass);

        for (int i = 0; i < emails.size(); i++) {
            emailWriter.write(emails.get(i) + "\n");
        }
        emailWriter.close();

        for (int i = 0; i < passwords.size(); i++) {
            passwordWriter.write(passwords.get(i) + "\n");
        }
        passwordWriter.close();

        }catch (Exception ex) {
            System.out.println("Error! Closing program...");
        }
    }






    private void writeSchedule() throws IOException
    {
        File scheduleWeek = new File("schedule.txt");
        BufferedReader schedReader = new BufferedReader(new FileReader(scheduleWeek));
        String firstLine = schedReader.readLine().trim();
        String[] columnName = firstLine.split(",");
        DefaultTableModel model = (DefaultTableModel)table.getModel();

        Object[] tableLines = schedReader.lines().toArray();

        for(int i = 0; i < tableLines.length; i++)
        {
            String line = tableLines[i].toString().trim();
            String[] dataRow = line.split(",");
            model.addRow(dataRow);
        }
        schedReader.close();
    }

    private void newPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordActionPerformed
        // TODO add your handling code here:
        
        
    }
    
    private void plusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusBtnActionPerformed
        // TODO add your handling code here:

        //data for day combo box
        String days[] = {"Day", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
        JComboBox day = new JComboBox(days);

        //data for start time combo box
       String startTimes [] = {"Start Time", "7 AM", "8 AM", "9 AM","10 AM","11 AM", "12 PM", "1 PM","2 PM","3 PM","4 PM","5 PM","6 PM", "7 PM", "8 PM","9 PM","10 PM","11 PM", "12 AM",};
       JComboBox startTime = new JComboBox(startTimes);

        //data for start time combo box
        String endTimes [] = {"End Time", "7 AM", "8 AM", "9 AM","10 AM","11 AM", "12 PM", "1 PM","2 PM","3 PM","4 PM","5 PM","6 PM", "7 PM", "8 PM","9 PM","10 PM","11 PM", "12 AM",};
        JComboBox endTime = new JComboBox(endTimes);

        String name;
        name = JOptionPane.showInputDialog("What is your name?");

        Color selectedColor = JColorChooser.showDialog(null, "Select a color", null);

        int dayOfTheWeek;
        JOptionPane.showConfirmDialog(this,day, "Select Day of Shift you want to Schedule", JOptionPane.DEFAULT_OPTION);
        dayOfTheWeek = day.getSelectedIndex() - 1;
        System.out.println(dayOfTheWeek);

        int start;
        JOptionPane.showConfirmDialog(this,startTime, "Select Time you want to begin your shift", JOptionPane.DEFAULT_OPTION);
        start = startTime.getSelectedIndex() - 1;
        System.out.println(start);
        int end;
        JOptionPane.showConfirmDialog(this,endTime, "Select Time you want to end shift", JOptionPane.DEFAULT_OPTION);
        end = endTime.getSelectedIndex() - 1;
        System.out.println(end);


        int count = (end - start) + 1;
        int x = dayOfTheWeek;
        int y = start;

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();

       for (int i = 0; i < count; i++) {
           table.setValueAt(name, y, x + 1);
           table.getCellRenderer(y, x + 1).getTableCellRendererComponent(table, null, false, false, y, x + 1)
                   .setBackground(selectedColor);
           y++;
       }


        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        try
        {
            saveSchedule();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_plusBtnActionPerformed

    private void minusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusBtnActionPerformed
        // TODO add your handling code here:
        String name;

        String days[] = {"Day", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
        JComboBox day = new JComboBox(days);


        name = JOptionPane.showInputDialog("What is the email of the employee that you want to remove?");

        int dayOfTheWeek;
        JOptionPane.showConfirmDialog(this,day, "Select Day of Shift you want to Remove", JOptionPane.DEFAULT_OPTION);
        dayOfTheWeek = day.getSelectedIndex();

        for (int row = 1; row < table.getRowCount(); row++) {
            Object cellValue = table.getValueAt(row, dayOfTheWeek);
            if (cellValue != null && cellValue.toString().equals(name)) {
                table.setValueAt(null, row, dayOfTheWeek); // Clear cell value in the target column
                TableCellRenderer cellRenderer = table.getCellRenderer(row, dayOfTheWeek);

        Component cellComponent = table.prepareRenderer(cellRenderer, row, dayOfTheWeek);
        cellComponent.setBackground(table.getBackground());
            try{
                saveSchedule();
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
            }
        }
    }//GEN-LAST:event_minusBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminWeeklySchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminWeeklySchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminWeeklySchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminWeeklySchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserWeeklySchedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton minusBtn;
    private javax.swing.JButton plusBtn;
    private javax.swing.JTable table;
    private javax.swing.JButton addUserBtn;
    private javax.swing.JButton removeUserBtn;
    private ImageIcon plusIcon;
    private ImageIcon minusIcon;
    private JPanel logoPanel;
    private JLabel logoTitle;
    private ImageIcon logoIcon;
    private JLabel logoIconLabel;
    private JPanel groupPanel;
    private JButton newPassword; 

    // End of variables declaration//GEN-END:variables
}
